plugins {
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'pl.allegro.tech.build.axion-release' version '1.7.1' apply false
}

allprojects {
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    project.ext.versions = [
            springBoot: '1.5.6.RELEASE',
            spock     : '1.1-groovy-2.4',
            wiremock  : '2.7.1',

            checkstyle: '6.3',
            gradle    : '4.1'
    ]
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'pl.allegro.tech.build.axion-release'

    test {
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    [compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'

    dependencies {
        testCompile "org.spockframework:spock-core:${versions.spock}"
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = false
            xml.enabled = true
            csv.enabled = false
        }
    }

    configurations {
        checkstyleConfig {
            transitive = false
        }
    }

    dependencies {
        checkstyleConfig "com.puppycrawl.tools:checkstyle:${versions.checkstyle}"
    }

    checkstyle {
        toolVersion = "${versions.checkstyle}"
        config = resources.text.fromFile(rootProject.file('config/checkstyle/checkstyle.xml'))
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output.classesDir)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = false
        xml.enabled = true
        csv.enabled = false

        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls.sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()

task wrapper(type: Wrapper) {
    gradleVersion = "${versions.gradle}"
}
